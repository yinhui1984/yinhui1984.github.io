<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>#chan# on Zhouyinhui&#39;s Space</title>
    <link>/tags/#chan%23/</link>
    <description>Recent content in #chan# on Zhouyinhui&#39;s Space</description>
    <image>
      <url>%3Clink%20or%20path%20of%20image%20for%20opengraph,%20twitter-cards%3E</url>
      <link>%3Clink%20or%20path%20of%20image%20for%20opengraph,%20twitter-cards%3E</link>
    </image>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Fri, 10 Jun 2022 15:04:49 +0800</lastBuildDate><atom:link href="/tags/#chan%23/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>[Golang]go语言中Channel是如何工作的</title>
      <link>/posts/golang_how_channel_works/</link>
      <pubDate>Fri, 10 Jun 2022 15:04:49 +0800</pubDate>
      
      <guid>/posts/golang_how_channel_works/</guid>
      <description>了解Golang通道的内部工作原理 goroutine(协程)和通道
goroutine是一个轻量级的用户空间线程，由Go运行时管理。它同时执行任务，可能是并行的。
通道是用于goroutine之间的通信。
在这篇文章中，我们将深入了解通道的内部运作和它的发送/接收操作。
缓冲通道 我们先创建一个缓冲通道用于下面的解释。
ch := make(chan int, 3) 上面的语句创建了一个缓冲通道，最多可以容纳 3 个int类型的值。
在底层，make函数 在堆上分配了一个 hchan 结构并返回一个指向它的指针。 以下是 hchan 结构的一些字段及其解释。
some fields of hchan struct
type hchan struct { buf unsafe.Pointer sendx uint recvx uint lock mutex ... // other fields}  buf 是一个指向数组的指针，它维护着一个循环队列。 sendx 是数组中发送元素的索引 recvx 是收到的元素在数组中的索引 lock 确保通道的读写是一个原子性的操作  非阻塞的发送和接收 当通道未满时，我们可以在循环队列的后面插入元素，而不会有阻塞。
// G1 sends three elements into the channel, capicity = 3ch &amp;lt;- elem1 ch &amp;lt;- elem2 ch &amp;lt;- elem3 ​</description>
    </item>
    
  </channel>
</rss>
